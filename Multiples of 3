//                               KiSmat
#include<bits/stdc++.h>
 
using namespace std;
 
#define night_rider ios::sync_with_stdio(false);cin.tie(NULL);
#define double long double
#define int long long int
#define en "\n"
#define fi first
#define se second
#define PB push_back
#define all(v) v.begin(),v.end()
#define allr(v) v.rbegin(),v.rend()
#define rep(i,x,y,k) for(int i=x ; i<y ; i+=k)
#define erep(i,x,y,k) for(int i=x ; i<y ; i+=k)
#define repr(i,x,y,k) for(int i=x ; i>y ; i-=k)
#define sz(x) (int)(x.size())
 
typedef vector<int> vi;
typedef vector<vector<int>> vii;
typedef pair<int,int> pi;
typedef vector<pair<int,int>> pii;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------- 
 
#ifndef ONLINE_JUDGE
#define debug(x) cerr << #x <<" "; _print(x); cerr << endl;
#else
#define debug(x)
#endif
 
void _print(int t) {cerr << t;}
void _print(string t) {cerr << t;}
void _print(char t) {cerr << t;}
void _print(double t) {cerr << t;}
 
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(vector <vector<T>> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) {cerr << "{"; _print(p.fi); cerr << ","; _print(p.se); cerr << "}";}
template <class T> void _print(vector <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(set <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T> void _print(multiset <T> v) {cerr << "[ "; for (T i : v) {_print(i); cerr << " ";} cerr << "]";}
template <class T, class V> void _print(map <T, V> v) {cerr << "[ "; for (auto i : v) {_print(i); cerr << " , ";} cerr << "]";}
template <class T> void _print(vector <vector<T>> v) {cerr<<"[ ";for(auto& row : v) { cerr<<" {";for(auto& col : row) {_print(col); cerr<<" , ";} cerr<<"}\n";} cerr<<" ]";}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------- 

const int no=3e6+5,modulo=1e9+7,inf=1e18,N=2e3+9;
int ar[no],br[no],cr[no];
//LOWER_BOUND(n) - FIRST ELEMENT GREATER THAN EQUAL TO n
//UPPER_BOUND(n) - FIRST ELEMENT GREATER THAN n
 
//-------------------------------------------------------------------------------------------------------------------------------------------------------------- 

vi lazy(no,0) ;
//a-0 , b-1, c-2
struct node {
    int a,b,c;
};
node tree[no] ;

void build(int idx, int l, int r) {
    if(l==r) {
        tree[idx].a=1;
        tree[idx].b=0;
        tree[idx].c=0;
        return ;
    }
    int mid=(l+r)/2;
    build(2*idx,l,mid) ;
    build(2*idx+1,mid+1,r);
    tree[idx].a=tree[2*idx].a+tree[2*idx+1].a ;
    tree[idx].b=tree[2*idx].b+tree[2*idx+1].b ;
    tree[idx].c=tree[2*idx].c+tree[2*idx+1].c ;
}

int query(int idx, int l, int r, int ql, int qr) {
    
    if(lazy[idx]!=0) {
        int zero=tree[idx].a,one=tree[idx].b,two=tree[idx].c;
        if(lazy[idx]%3==0) {}
        else if(lazy[idx]%3==1) {
            tree[idx].b=zero;
            tree[idx].c=one;
            tree[idx].a=two;
        }
        else {
            tree[idx].c=zero;
            tree[idx].a=one;
            tree[idx].b=two;
        }
        if(l!=r) {
            lazy[2*idx]+=lazy[idx];
            lazy[2*idx+1]+=lazy[idx];   
        }
        lazy[idx]=0;
    }

    if(r<ql || qr<l) return 0;
    if(ql<=l && r<=qr) return tree[idx].a;
    int mid=(l+r)/2;
    return query(2*idx,l,mid,ql,qr)+query(2*idx+1,mid+1,r,ql,qr) ;
}

void range_update(int idx, int l, int r, int ql, int qr, int val) {
    if(lazy[idx]!=0) {
        int zero=tree[idx].a,one=tree[idx].b,two=tree[idx].c;
        if(lazy[idx]%3==0) {}
        else if(lazy[idx]%3==1) {
            tree[idx].b=zero;
            tree[idx].c=one;
            tree[idx].a=two;
        }
        else {
            tree[idx].c=zero;
            tree[idx].a=one;
            tree[idx].b=two;
        }
        if(l!=r) {
            lazy[2*idx]+=lazy[idx];
            lazy[2*idx+1]+=lazy[idx];   
        }
        lazy[idx]=0;
    }
    if(r<ql || l>qr) return ;
    if(ql<=l && r<=qr) {
        int zero=tree[idx].a,one=tree[idx].b,two=tree[idx].c;
        tree[idx].b=zero;
        tree[idx].c=one;
        tree[idx].a=two;
        if(l!=r) {
            lazy[2*idx]+=val;
            lazy[2*idx+1]+=val;   
        }
        return ;
    }
    int mid=(l+r)/2;
    range_update(2*idx,l,mid,ql,qr,val);
    range_update(2*idx+1,mid+1,r,ql,qr,val);
    tree[idx].a=tree[2*idx].a+tree[2*idx+1].a ;
    tree[idx].b=tree[2*idx].b+tree[2*idx+1].b ;
    tree[idx].c=tree[2*idx].c+tree[2*idx+1].c ;
}

void solve () {
    int n=0,m=0,a=0,b=0,c=0,d=0,x=0,y=0,z=0,w=0,k=0; 
    cin>>n>>m;
    build(1,1,n) ;
    while(m--) {
        cin>>x;
        if(x==1) {
            cin>>a>>b;
            cout<<query(1,1,n,a+1,b+1)<<en;
        }
        else {
            cin>>a>>b;
            range_update(1,1,n,a+1,b+1,1) ;
        }
    }
}       

inline void runn() {
    #ifndef ONLINE_JUDGE                  
    freopen("input.txt","r",stdin);   
    freopen("output.txt","w",stdout);   
    freopen("error.txt","w",stderr);   
    #endif                               
}                                          
                                         
signed main() {                          
    night_rider
    runn(); 
    int t=1;
    cout<<fixed<<setprecision(15);
  //  cin>>t;
    rep(i,1,t+1,1) {
       // cout << "Case #" << i << ": ";
        solve();
    }
}
//Shinchan Loves Coding :))
